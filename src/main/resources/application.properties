spring.application.name=crypto-portfolio-monitoring

msg.assets=${MENSSEGER_ASSETS}
posgresql.url=${POSTGRES_URL}

jwt.secret=clave_secreta_segura_para_firmar_tokens_jwt
jwt.access-token-expiration=900000
jwt.refresh-token-expiration=604800000

spring.datasource.url=${POSTGRES_URL}
spring.datasource.username=${SPRING_DATASOURCE_USER}
spring.datasource.password=${SPRING_DATASOURCE_PASS}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.open-in-view=true

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Configuraciones adicionales para HikariCP
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.minimum-idle=10
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1800000

spring.data.redis.host=${REDIS_HOST_LOCAL}
spring.data.redis.port=${REDIS_PORT_LOCAL}


API_COINMARKETCAP_BASE_URL=${API_COINMARKETCAP_BASE_URL}
API_COINMARKETCAP_API_KEY=${COINMARKETCAP_API_KEY}
API_ALPHAVANTAGE_BASE_URL=${API_ALPHAVANTAGE_BASE_URL}
API_ALPHAVANTAGE_API_KEY=${ALPHAVANTAGE_API_KEY}

polygon.api.key=${POLYGON_API_KEY}
polygon.base-url=${POLYGON_BASE_URL}

marketdata.alphavantage.base-url=${API_ALPHAVANTAGE_BASE_URL}
marketdata.alphavantage.api-key=${ALPHAVANTAGE_API_KEY}

#logging.level.org.springframework.cache=TRACE

# Configuracion de OAuth2 Client
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.jwk-set-uri=sub

# Configuracion de depuracion adicional
#logging.level.org.hibernate=DEBUG
#logging.level.org.springframework.jdbc.datasource.init.ScriptUtils=DEBUG
#logging.level.org.springframework.core.env=DEBUG
#logging.level.org.springframework.beans=TRACE

#debug=true


# Configuracion de logging
# ===============================
#  LOGGING PARA SPRING SECURITY
# ===============================

# Habilita logs detallados de Spring Security
#logging.level.org.springframework.security=TRACE
#logging.level.org.springframework.security.web.FilterChainProxy=TRACE
#logging.level.org.springframework.security.web.access.ExceptionTranslationFilter=TRACE
#logging.level.org.springframework.security.web.access=TRACE
#logging.level.org.springframework.security.web.authentication=TRACE
#logging.level.org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter=DEBUG
#logging.level.org.springframework.security.web.authentication.www.BasicAuthenticationFilter=DEBUG
#logging.level.org.springframework.security.web.authentication.logout.LogoutFilter=DEBUG
#logging.level.org.springframework.security.oauth2=DEBUG

# Si tienes un filtro personalizado (como JwtRequestFilter)
#logging.level.com.mx.cryptomonitor.infrastructure.security.JwtRequestFilter=TRACE

# Logs generales de Spring Boot
#logging.level.org.springframework=INFO
#logging.level.com.mx.cryptomonitor=DEBUG
