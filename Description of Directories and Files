Description of Directories and Files
1. domain/ - Domain Logic
	This directory contains the pure domain logic without any dependencies on frameworks.

	*models/ - Domain entities and value objects:
		User.java
		Wallet.java
		Transaction.java
		Cryptocurrency.java
		
	*repositories/ - Domain repository interfaces:
		UserRepository.java
		WalletRepository.java
		TransactionRepository.java
		CryptocurrencyRepository.java
		
	*services/ - Domain services:
		UserService.java
		WalletService.java
		TransactionService.java
		CryptocurrencyService.java
		
2. infrastructure/ - Infrastructure Implementations
	This directory contains the implementations for infrastructure concerns.

	*api/ - External API calls (e.g., Binance API):
		BinanceService.java
		
	*configuration/ - Framework configuration files:
		DatabaseConfig.java
		BinanceApiConfig.java
		
	*persistence/ - Implementation of repositories using JPA/Hibernate:
		UserRepositoryImpl.java
		WalletRepositoryImpl.java
		TransactionRepositoryImpl.java
		CryptocurrencyRepositoryImpl.java
		
	*security/ - Security configurations and implementations:
		SecurityConfig.java
		JwtTokenProvider.java
		AuthenticationService.java
		
3. application/ - Application Logic
	This directory contains the application logic and controllers.

	*controllers/ - REST controllers:
		UserController.java
		WalletController.java
		TransactionController.java
		CryptocurrencyController.java
		AuthController.java
4. Configuration and Resource Files
	application.properties - Application configuration properties.
	sql/schema.sql - SQL schema for database creation.
5. Build and Deployment Files
	Dockerfile - Docker image definition for the application.
	Jenkinsfile - Jenkins pipeline for continuous integration and deployment.
	pom.xml - Maven build file for managing dependencies and build configuration.
	mvnw and mvnw.cmd - Maven wrappers to ensure consistent Maven version usage.